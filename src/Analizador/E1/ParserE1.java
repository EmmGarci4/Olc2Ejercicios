
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 05 12:32:06 CST 2019
//----------------------------------------------------

package Analizador.E1;

import java_cup.runtime.*;
import Analizador.util.*;
import intefaz.Principal;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 05 12:32:06 CST 2019
  */
public class ParserE1 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserE1() {super();}

  /** Constructor which sets the default scanner. */
  public ParserE1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserE1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\004\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\007\000\004\020\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\011\001\002\000\006\002\ufffe\012\007" +
    "\001\002\000\004\020\006\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\007\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserE1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserE1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserE1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        Analizador.AnalizadorLenguaje.getErrores().add(new MiError("identificador \""+s.value+"\" no identificado", TipoError.SINTACTICO, 
        "",(s.right+1), (s.left+1)));
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    getErrores().*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");  
        Analizador.AnalizadorLenguaje.getErrores().add(new MiError("identificador \""+s.value+"\" no identificado", TipoError.SINTACTICO, 
        "",(s.right+1), (s.left+1)));
  
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserE1$actions {


void Ej1(ListaPalabras lista){
lista.Mostrar10MasPuntuadas();
}


  private final ParserE1 parser;

  /** Constructor */
  CUP$ParserE1$actions(ParserE1 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserE1$do_action(
    int                        CUP$ParserE1$act_num,
    java_cup.runtime.lr_parser CUP$ParserE1$parser,
    java.util.Stack            CUP$ParserE1$stack,
    int                        CUP$ParserE1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserE1$result;

      /* select the action based on the action number */
      switch (CUP$ParserE1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INI1 ::= id 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserE1$stack.peek()).value;
		ListaPalabras lista=new ListaPalabras();
lista.add(new Palabra(val,1));
RESULT=lista;

              CUP$ParserE1$result = parser.getSymbolFactory().newSymbol("INI1",1, ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()), RESULT);
            }
          return CUP$ParserE1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INI1 ::= id coma INI1 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserE1$stack.peek()).value;
		
ListaPalabras lista = (ListaPalabras)l;
if(lista.existe(val)){
lista.aumentar(val);
}else{
lista.add(new Palabra(val,1));
}
RESULT=lista;

              CUP$ParserE1$result = parser.getSymbolFactory().newSymbol("INI1",1, ((java_cup.runtime.Symbol)CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()), RESULT);
            }
          return CUP$ParserE1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-1)).value;
		RESULT = start_val;
              CUP$ParserE1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserE1$stack.elementAt(CUP$ParserE1$top-1)), ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserE1$parser.done_parsing();
          return CUP$ParserE1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= INI1 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserE1$stack.peek()).value;
		Ej1((ListaPalabras)l);
              CUP$ParserE1$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE1$stack.peek()), RESULT);
            }
          return CUP$ParserE1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

