
package Analizador.E6;

import java_cup.runtime.*;
import Analizador.util.*;
import intefaz.Principal;
import java.util.Stack;
import java.util.ArrayList;

parser code
{:
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        Analizador.AnalizadorLenguaje.getErrores().add(new MiError("identificador \""+s.value+"\" no identificado", TipoError.SINTACTICO, 
        "",(s.right+1), (s.left+1)));
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    getErrores().*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");  
        Analizador.AnalizadorLenguaje.getErrores().add(new MiError("identificador \""+s.value+"\" no identificado", TipoError.SINTACTICO, 
        "",(s.right+1), (s.left+1)));
  
    }

:}

action code {:

:}

/*terminales reservados*/
terminal mas,menos,div,por,par1,par2,coma,cor1,cor2,llave1,llave2,puntoycoma;
terminal String id,entero,decimal,cadena,booleano,caracter;
non terminal INICIO;
non terminal S,A,B,C;
//precedencia

INICIO::=S:val{:Principal.escribirMensajeEnConsola(val.toString());:};

S::=cor1 A:l cor2{:
ArrayList<String> lista=(ArrayList<String>)l;
String primero=lista.get(0);
String ultimo=lista.get(lista.size()-1);
lista.set(0, ultimo);
lista.set(lista.size()-1,primero);
                StringBuilder resultado=new StringBuilder();
                int i;
                resultado.append("[");
                for(i=0;i<lista.size();i++){
                  resultado.append(lista.get(i));
                    if(i<lista.size()-1){
                        resultado.append(",");
                    }
                }
                resultado.append("]");
                RESULT=resultado.toString();
:};

A::=A:l coma entero:val{:
ArrayList<String> lista=(ArrayList<String>)l;
lista.add(val.toString());
RESULT=lista;
:}
|entero:val{:
ArrayList<String> lista=new ArrayList<>();
lista.add(val.toString());
RESULT=lista;
:}
|A:l coma S:val{:
ArrayList<String> lista=(ArrayList<String>)l;
lista.add(val.toString());
RESULT=lista;
:}
|S:val {:
ArrayList<String> lista=new ArrayList<>();
lista.add(val.toString());
RESULT=lista;
:};

/*
Para un lenguaje que reconoce listas de números enteros, eventualmente anidadas entre
corchetes, escriba una definición dirigida por la sintaxis, para una gramática no ambigua
y no recursiva por la derecha, que intercambie el primer y último elemento de cada lista.
[1, 2, [1, 2, [1, 2, [1, 2, [1, 2, 3]]]]] = [[[[[3, 2, 1], 2, 1], 2, 1], 2, 1], 2, 1]
[1] = [1]
[1, [1, [1, [1, [1]]]]] = [[[[[1], 1], 1], 1], 1]
[1, 2, 3, 4, 5] = [5, 2, 3, 4, 1]
[1, 2, 7, [9, 3, [1, 3, 5, 7], 1], [5, 0], [4, 3, 1]] = [[1, 3, 4], 2, 7, [1, 3, [7, 3, 5, 1], 9], [0, 5], 1]
*/