
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 08 18:41:28 CST 2019
//----------------------------------------------------

package Analizador.E20;

import java_cup.runtime.*;
import Analizador.util.*;
import intefaz.Principal;
import java.util.Stack;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 08 18:41:28 CST 2019
  */
public class ParserE20 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserE20() {super();}

  /** Constructor which sets the default scanner. */
  public ParserE20(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserE20(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\004" +
    "\000\002\005\005\000\002\005\003\000\002\006\005\000" +
    "\002\006\003\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\013\007\001\002\000\006\002\ufffe\012" +
    "\ufffe\001\002\000\006\002\001\012\031\001\002\000\004" +
    "\002\030\001\002\000\010\010\013\014\016\023\010\001" +
    "\002\000\014\004\ufff5\007\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\001\002\000\014\004\ufff6\007\ufff6\011\ufff6\012\ufff6\014" +
    "\ufff6\001\002\000\014\004\ufff8\007\021\011\ufff8\012\ufff8" +
    "\014\ufff8\001\002\000\006\010\013\023\010\001\002\000" +
    "\006\012\023\014\024\001\002\000\010\004\017\012\ufffa" +
    "\014\ufffa\001\002\000\006\002\ufffc\012\ufffc\001\002\000" +
    "\006\010\013\023\010\001\002\000\014\004\ufff9\007\021" +
    "\011\ufff9\012\ufff9\014\ufff9\001\002\000\006\010\013\023" +
    "\010\001\002\000\014\004\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\014\ufff7\001\002\000\006\010\013\023\010\001\002\000" +
    "\006\002\ufffd\012\ufffd\001\002\000\010\004\017\012\ufffb" +
    "\014\ufffb\001\002\000\006\004\017\011\027\001\002\000" +
    "\014\004\ufff4\007\ufff4\011\ufff4\012\ufff4\014\ufff4\001\002" +
    "\000\004\002\000\001\002\000\004\013\007\001\002\000" +
    "\006\002\uffff\012\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\010\002\005\003\004\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\013\006\014\007\011\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\025" +
    "\007\011\010\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\017\010\010\001\001" +
    "\000\002\001\001\000\004\010\021\001\001\000\002\001" +
    "\001\000\010\006\024\007\011\010\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\031\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserE20$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserE20$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserE20$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
        Analizador.AnalizadorLenguaje.getErrores().add(new MiError("identificador \""+s.value+"\" no identificado", TipoError.SINTACTICO, 
        "",(s.right+1), (s.left+1)));
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    getErrores().*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");  
        Analizador.AnalizadorLenguaje.getErrores().add(new MiError("identificador \""+s.value+"\" no identificado", TipoError.SINTACTICO, 
        "",(s.right+1), (s.left+1)));
  
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserE20$actions {




  private final ParserE20 parser;

  /** Constructor */
  CUP$ParserE20$actions(ParserE20 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserE20$do_action(
    int                        CUP$ParserE20$act_num,
    java_cup.runtime.lr_parser CUP$ParserE20$parser,
    java.util.Stack            CUP$ParserE20$stack,
    int                        CUP$ParserE20$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserE20$result;

      /* select the action based on the action number */
      switch (CUP$ParserE20$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // I ::= par1 E par2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).value;
		
RESULT=a;

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // I ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		RESULT=Integer.parseInt(a);
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("I",6, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // H ::= I 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		RESULT=a;
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("H",5, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // H ::= H por I 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		
RESULT=(int)a*(int)b;

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("H",5, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		RESULT=a;
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= E mas H 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		
RESULT=(int)a+(int)b;

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // F ::= E 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		RESULT=new Atributo(val.toString(),(int)val);
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // F ::= F coma E 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		
Atributo att=(Atributo)lista;
int mayor=att.getMayor()>(int)val?att.getMayor():(int)val;
RESULT=new Atributo(att.getValor()+","+val.toString(),mayor);

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("F",3, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L ::= cor1 cor2 
            {
              Object RESULT =null;
		RESULT=new Atributo("[]Mayor:No hay",0);
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("L",2, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L ::= cor1 F cor2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).value;
		
Atributo att=(Atributo)val;
RESULT=new Atributo("["+att.getValor()+"]Mayor:"+att.getMayor(),0);

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("L",2, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= L 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		RESULT=val;
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // A ::= A coma L 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		
Atributo a1=(Atributo)a;
Atributo b1=(Atributo)b;
RESULT=new Atributo(b1.getValor()+"\n"+a1.getValor(),0);

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("A",1, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-2)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)).value;
		RESULT = start_val;
              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.elementAt(CUP$ParserE20$top-1)), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserE20$parser.done_parsing();
          return CUP$ParserE20$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserE20$stack.peek()).value;
		
Atributo a1=(Atributo)a;
Principal.escribirMensajeEnConsola(a1.getValor());

              CUP$ParserE20$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserE20$stack.peek()), RESULT);
            }
          return CUP$ParserE20$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

